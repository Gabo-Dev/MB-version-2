/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.practica.proyecto_mb_v_2;

import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.impl.HttpSolrClient;
import org.apache.solr.client.solrj.request.CoreAdminRequest;
import org.apache.solr.client.solrj.response.CoreAdminResponse;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrDocumentList;
import org.apache.solr.common.SolrInputDocument;
import org.apache.solr.common.params.CoreAdminParams;

/**
 *
 * @author jhony
 */
public class Menu extends javax.swing.JFrame {

    SolrDocumentList docs = new SolrDocumentList(), trecDoc = new SolrDocumentList();
    int noConsultas = 0;

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        indexaBtn = new javax.swing.JButton();
        consultaBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textInfo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        indexaBtn.setText("Indexar Documento");
        indexaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexaBtnActionPerformed(evt);
            }
        });

        consultaBtn.setText("Consulta");
        consultaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultaBtnActionPerformed(evt);
            }
        });

        textInfo.setEditable(false);
        textInfo.setColumns(20);
        textInfo.setRows(5);
        jScrollPane1.setViewportView(textInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(384, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(indexaBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                    .addComponent(consultaBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(358, 358, 358))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(111, Short.MAX_VALUE)
                .addComponent(indexaBtn)
                .addGap(18, 18, 18)
                .addComponent(consultaBtn)
                .addGap(71, 71, 71)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void indexaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexaBtnActionPerformed
        // TODO add your handling code here:
        try {
            Scanner sc = null;
            String state = "b", index = "", title = "", text = "",
                    line, parts[];
            ArrayList<String> persons = new ArrayList<>(), organizations = new ArrayList<>(),
                    money = new ArrayList<>(), locations = new ArrayList<>(), authors = new ArrayList<>();
            // Etiquetas auxiliares para identificar el patron de cada atributo person, date y organization;
            String EtiquetaPerson = "<Person>(.*?)<\\/Person>", EtiquetaOrganization = "<Organization>(.*?)<\\/Organization>",
                    EtiquetaMoney = "<Money>(.*?)<\\/Money>", EtiquetaLocation = "<Location>(.*?)<\\/Location>";
            String url = "http://localhost:8983/solr";
            if (hasCollection(url)) {
                int opc = JOptionPane.showConfirmDialog(null, "Solr tiene un core, deseas hacer un reset?");
                if (opc == 0) {
                    // Reset Colecciones
                    DeletingAllDocuments();
                }
            }
            JFileChooser fileChooser = new JFileChooser();
            int result = fileChooser.showOpenDialog(null);
            File file = null;
            if (result == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile();
            }

            sc = new Scanner(file);
            //  leemos
            while (sc.hasNextLine()) {
                line = sc.nextLine();
                //  indice
                if (line.startsWith(".I", 0)) {
                    if (!title.isEmpty()) {
                        indexaDocumento(index, title, authors, text, persons, organizations, money, locations);
                        persons.clear();
                        organizations.clear();
                        money.clear();
                        locations.clear();
                        authors.clear();
                        title = "";
                        text = "";
                    }

                    parts = line.split(" ");
                    index = parts[1];
                }
                if (line.startsWith(".T", 0)) {
                    title = sc.nextLine();
                    //title = title.replaceAll("[&\"~^*?(){}[\\\\]:;/\\\\+\\-]", "");

                }
                if (line.startsWith(".A", 0)) {
                    state = "author";
                    line = sc.nextLine();
                }
                if (line.startsWith(".W", 0)) {  //texto 
                    state = "READING";
                    line = sc.nextLine();
                }
                if (line.startsWith(".X", 0) || line.startsWith(".B", 0)) {
                    state = "IGNORING";
                }
                if ("READING".equals(state)) {  //texto del documento 
                    // Matcher
                    Pattern p1 = Pattern.compile(EtiquetaPerson);
                    Matcher m1 = p1.matcher(line);
                    Pattern p3 = Pattern.compile(EtiquetaOrganization);
                    Matcher m3 = p3.matcher(line);
                    Pattern p4 = Pattern.compile(EtiquetaMoney);
                    Matcher m4 = p4.matcher(line);
                    Pattern p5 = Pattern.compile(EtiquetaLocation);
                    Matcher m5 = p5.matcher(line);
                    text = text + line;
                    //text = text.replaceAll("[&\"~^*?(){}[\\\\]:;/\\\\+\\-]", "");
                    // extraemos contenido 
                    while (m1.find()) {
                        if (!persons.contains(m1.group(1))) {
                            persons.add(m1.group(1).replaceAll("[&\"~^*?(){}[\\\\]:;/\\\\+\\-]", ""));
                        }
                    }

                    while (m3.find()) {
                        if (!organizations.contains(m3.group(1))) {
                            organizations.add(m3.group(1).replaceAll("[&\"~^*?(){}[\\\\]:;/\\\\+\\-]", ""));
                        }

                    }
                    while (m4.find()) {
                        money.add(m4.group(1).replaceAll("[&\"~^*?(){}[\\\\]:;/\\\\+\\-]", ""));
                    }
                    while (m5.find()) {
                        locations.add(m5.group(1).replaceAll("[&\"~^*?(){}[\\\\]:;/\\\\+\\-]", ""));
                    }
                }
                if ("author".equals(state)) {
                    line = line.replaceAll("<Person>|</Person>|<Organization>|</Organization>|<Money>|</Money>|<Location>|</Location>", "");
                    authors.add(line);
                }
            }
            JOptionPane.showMessageDialog(null, "Document Indexed");
        } catch (SolrServerException | IOException | NullPointerException ex) {

            JOptionPane.showMessageDialog(null, "Error: " + ex);
        }


    }//GEN-LAST:event_indexaBtnActionPerformed

    private void consultaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultaBtnActionPerformed
        // TODO add your handling code here:
        try {
            //String text = "", line, state = "false";
            JFileChooser fileChooser = new JFileChooser();
            ArrayList<String> persons = new ArrayList<>(), organizations = new ArrayList<>(),
                    money = new ArrayList<>(), locations = new ArrayList<>();
            String EtiquetaPerson = "<Person>(.*?)<\\/Person>", EtiquetaOrganization = "<Organization>(.*?)<\\/Organization>",
                    EtiquetaMoney = "<Money>(.*?)<\\/Money>", EtiquetaLocation = "<Location>(.*?)<\\/Location>";
            String tmp;

            //fileChooser.setFileFilter(new FileNameExtensionFilter("All Files", "*.*"));
            int result = fileChooser.showOpenDialog(null);
            File file = null;
            if (result == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile();
            }
            try ( BufferedReader br = new BufferedReader(new FileReader(file))) {
                String line;
                boolean reading = false;
                StringBuilder text = new StringBuilder();
                Pattern p1 = Pattern.compile(EtiquetaPerson);
                Pattern p3 = Pattern.compile(EtiquetaOrganization);
                Pattern p4 = Pattern.compile(EtiquetaMoney);
                Pattern p5 = Pattern.compile(EtiquetaLocation);
                while ((line = br.readLine()) != null) {
                    if (line.startsWith(".I") || line.startsWith(".B")) {
                        reading = false;
                        if (!text.isEmpty()) {
                            // Matcher
                            Matcher m1 = p1.matcher(text);
                            Matcher m3 = p3.matcher(text);
                            Matcher m4 = p4.matcher(text);
                            Matcher m5 = p5.matcher(text);
                            // extraemos contenido 
                            while (m1.find()) {
                                if (!persons.contains(m1.group(1))) {
                                    tmp = m1.group(1);
                                    tmp = tmp.replaceAll("[&\"~^*?(){}[\\\\]:;/\\\\+\\-]", "");
                                    persons.add(tmp);
                                }
                            }
                            while (m3.find()) {
                                if (organizations.contains(m3.group())) {
                                    tmp = m3.group(1);
                                    tmp = tmp.replaceAll("[&\"~^*?(){}[\\\\]:;/\\\\+\\-]", "");
                                    organizations.add(tmp);
                                }
                            }
                            while (m4.find()) {
                                if (money.contains(m4.group())) {
                                    tmp = m4.group(1);
                                    tmp = tmp.replaceAll("[&\"~^*?(){}[\\\\]:;/\\\\+\\-]", "");
                                    money.add(tmp);
                                }
                            }
                            while (m5.find()) {
                                if (locations.contains(m5.group())) {
                                    tmp = m5.group(1);
                                    tmp = tmp.replaceAll("[&\"~^*?(){}[\\\\]:;/\\\\+\\-]", "");
                                    locations.add(tmp);
                                }
                            }
                            searchDocuments(text.toString(), persons, organizations, money, locations);
                            text.setLength(0);
                            persons = new ArrayList<>();
                            organizations = new ArrayList<>();
                        }

                    }
                    if (reading) {
                        //line = line.replaceAll("[&\"~^*?(){}[\\\\]:;/\\\\+\\-]", "");
                        text.append(line).append(" ");
                    }
                    if (line.startsWith(".W")) {
                        reading = true;
                    }
                }

            } catch (Exception e) {
            }

            JOptionPane.showMessageDialog(null, "Consulta Realizada");
            JOptionPane.showMessageDialog(null, "El programa procederá a crear el fichero trec correspondiente");
            try {
                if (trecDoc.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Error: la consulta no obtuvo resultados.");
                } else {
                    String path = "";
                    JOptionPane.showMessageDialog(null, "Indica el directorio donde se almacenarán los datos:");
                    JFileChooser t = new JFileChooser();
                    t.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                    int selection = t.showSaveDialog(null);
                    if (selection == JFileChooser.APPROVE_OPTION) {
                        path = t.getSelectedFile().getAbsolutePath();
                    }
                    if (createQRYTrec(path)) {

                        JOptionPane.showMessageDialog(null, "Momento de evaluar.");
                    } else {
                        JOptionPane.showMessageDialog(null, "Faltan documentos para poder usar el Trec Eva");
                    }
                }
            } catch (HeadlessException e) {
                System.out.println(e);
            }
        } catch (HeadlessException | NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Error al realizar consulta.");
            System.out.println(e);
        }
    }
//GEN-LAST:event_consultaBtnActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Menu m = new Menu();
        m.setDefaultCloseOperation(EXIT_ON_CLOSE);
        m.setVisible(true);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton consultaBtn;
    private javax.swing.JButton indexaBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textInfo;
    // End of variables declaration//GEN-END:variables
 public void DeletingAllDocuments() {
        String url = "http://localhost:8983/solr/micoleccion";
        // Preparing Solr Client
        SolrClient Solr = new HttpSolrClient.Builder(url).build();
        try {
            // Delete all
            Solr.deleteByQuery("*");
            Solr.commit();
        } catch (IOException | SolrServerException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

        //  Saving the document
        JOptionPane.showMessageDialog(null, "Documents deleted");
    }

    public void indexaDocumento(String index, String title, ArrayList<String> authors, String text, ArrayList<String> p, ArrayList<String> o, ArrayList<String> m, ArrayList<String> l) throws SolrServerException, IOException {
        String tmp;
        HttpSolrClient solr = new HttpSolrClient.Builder("http://localhost:8983/solr/micoleccion").build();
        //  Create SolrDocument 
        SolrInputDocument dc = new SolrInputDocument();
        // filtramos
        if (title != null && text != null) {
            title = title.replaceAll("<Person>|</Person>|<Organization>|</Organization>|<Money>|</Money>|<Location>|</Location>", "");
            text = text.replaceAll("<Person>|</Person>|<Organization>|</Organization>|<Money>|</Money>|<Location>|</Location>", "");
        }
        dc.addField("index", index);
        dc.addField("title", title);
        dc.addField("text", text);
        dc.addField("author", authors.toArray(new String[0]));
        dc.addField("person", p.toArray(new String[0]));
        dc.addField("organization", o.toArray(new String[0]));
        dc.addField("money", m.toArray(new String[0]));
        dc.addField("location", l.toArray(new String[0]));
        solr.add(dc);
        solr.commit();

    }

    public boolean hasCollection(String url) {
        boolean has = false;
        try ( SolrClient solrClient = new HttpSolrClient.Builder(url).build()) {
            // Use CoreAdminRequest to get the list of collections
            CoreAdminRequest request = new CoreAdminRequest();
            request.setAction(CoreAdminParams.CoreAdminAction.STATUS);

            // Send the request and get the response
            CoreAdminResponse response = request.process(solrClient);

            // Get the list of collections from the response
            int numberOfCollections = response.getCoreStatus().size();
            if (numberOfCollections > 0) {
                has = true;
            }
        } catch (SolrServerException | java.io.IOException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e);
        }
        return has;
    }

    public void searchDocuments(String desc, ArrayList<String> persons, ArrayList<String> organizations, ArrayList<String> money, ArrayList<String> locations) throws SolrServerException, IOException {
        docs.clear();
        noConsultas++;
        HttpSolrClient solr = new HttpSolrClient.Builder("http://localhost:8983/solr/micoleccion").build();
        SolrQuery query = new SolrQuery();
        desc = desc.replaceAll("<Person>|</Person>|<Date>|</Date>|<Organization>|</Organization>|<Money>|</Money>|<Location>|</Location>", "");
        query.setQuery("text: " + desc);
        query.setIncludeScore(true);
        if (!persons.isEmpty()) {
            query.addFilterQuery("person:(" + String.join(" OR ", persons) + ")");
        }
        if (!organizations.isEmpty()) {
            query.addFilterQuery("organization:(" + String.join(" OR ", organizations) + ")");
        }
        if (!money.isEmpty()) {
            query.addFilterQuery("money:(" + String.join(" OR ", organizations) + ")");
        }
        if (!locations.isEmpty()) {
            query.addFilterQuery("location:(" + String.join(" OR ", organizations) + ")");
        }
        query.set("index", "id", "author", "title", "person", "organization", "money", "location");
        QueryResponse rsp = solr.query(query);
        docs = rsp.getResults();
        int tm = docs.size();

        for (int i = 0; i < tm; i++) {
            textInfo.append("Index: " + docs.get(i).getFieldValue("index").toString() + "  ");
            textInfo.append("Autor: " + docs.get(i).getFieldValue("author").toString() + "  ");
            textInfo.append("Titulo: " + docs.get(i).getFieldValue("title").toString() + "  ");
            textInfo.append("Texto: " + docs.get(i).getFieldValue("text").toString() + "  ");
            textInfo.append("score: " + docs.get(i).getFieldValue("score").toString() + "  ");
            if (docs.get(i).containsKey("person")) {
                textInfo.append("Persona: " + docs.get(i).getFieldValue("person").toString() + "  ");
            }

            if (docs.get(i).containsKey("organization")) {
                textInfo.append("Organizacion: " + docs.get(i).getFieldValue("organization").toString() + "  ");
            }
            if (docs.get(i).containsKey("money")) {
                textInfo.append("Dinero: " + docs.get(i).getFieldValue("money").toString() + "  ");
            }
            if (docs.get(i).containsKey("location")) {
                textInfo.append("Lugares: " + docs.get(i).getFieldValue("location").toString() + "  ");
            }

            //  Añadimos el valor de cada consulta al doc global
            docs.get(i).setField("Consulta", noConsultas);
            trecDoc.add(docs.get(i));
            textInfo.append("\n---------------------------------------------------------------------------- \n");
        }

    }

    private boolean createQRYTrec(String path) {
        boolean isCreated = false;
        try {
            String team = "ETSI", line, document, fichero = "";
            fichero = JOptionPane.showInputDialog(null, "Introduzca el nombre del fichero trec Solr: ") + ".TREC";
            path = path + "\\" + fichero;
            BufferedWriter w = new BufferedWriter(new FileWriter(path));
            int tm = trecDoc.size();
            for (int i = 0; i < tm; i++) {
                document = trecDoc.get(i).getFieldValue("index").toString().replaceAll("[\\[\\](){}]", "");
                line = trecDoc.get(i).getFieldValue("Consulta") + " " + "Q0" + " " + document + " " + (i + 1) + " " + trecDoc.get(i).getFieldValue("score") + " " + team + "\n";
                //  System.out.println(line);
                w.write(line);
            }
            w.close();
            isCreated = true;
            JOptionPane.showMessageDialog(null, "Fichero creado");
        } catch (HeadlessException | IOException e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(null, "Error al crear el QRY.TREC ");
        }
        return isCreated;
    }

}
